import matplotlib.pyplot as plt
from numpy.fft import rfft, rfftfreq, fft, ifft
import numpy as np
import math as m


class Sheme():
    
    def __here__(self, yn, t, f_dis):
        
        self.a = 1
        self.yn = yn
        self.t = t
        self.f_dis = f_dis
        self.buffer = list()
        self.signal = list()
    
    def clotting(self):
        
        xn = np.arange(0, self.t, 1 / self.f_dis)
        saw = np.angle(np.exp((complex(-0.5,8) * xn)))
        self.buffer.append(self.yn)
        self.buffer.append(self.yn * saw)
        self.signal = self.yn * saw
        
        return(self.yn * saw)
        
    def GetBuffer(self, i): # 0 Р Р†РЎвЂ¦Р С•Р Т‘Р Р…Р С•Р в„– 1 Р Р†РЎвЂ№РЎвЂ¦Р С•Р Т‘Р Р…Р С•Р в„–
        if i < 0:
            return self.bufferC[0]
        return self.buffer[1]
    
    def Without_changes(self):
        return self.yn
    
    def Return_Array(self): # Р Р†Р ВµРЎР‚Р Р…РЎС“РЎвЂљРЎРЉ Р С—Р С•Р В»Р Р…РЎвЂ№Р в„– Р СР В°РЎРѓРЎРѓР С‘Р Р† РЎРѓР С‘Р С–Р Р…Р В°Р В»Р В°
        return self.buffer[1]
    
    def Return_creator(self): # Р Р†Р ВµРЎР‚Р Р…РЎС“РЎвЂљРЎРЉ Р С–Р ВµР Р…Р ВµРЎР‚Р В°РЎвЂљР С•РЎР‚Р С•Р С
        for i in self.buffer[0]:
            yield i
